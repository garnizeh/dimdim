// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package repo

import (
	"context"
)

const createTag = `-- name: CreateTag :exec
INSERT INTO tags (
  name, created_at, updated_at
) VALUES (
  ?1, ?2, ?2
)
`

type CreateTagParams struct {
	Name      string
	CreatedAt int64
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) error {
	_, err := q.db.ExecContext(ctx, createTag, arg.Name, arg.CreatedAt)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
UPDATE tags
set deleted_at = ?2
WHERE id = ?1 AND deleted_at = 0
`

type DeleteTagParams struct {
	ID        int64
	DeletedAt int64
}

func (q *Queries) DeleteTag(ctx context.Context, arg DeleteTagParams) error {
	_, err := q.db.ExecContext(ctx, deleteTag, arg.ID, arg.DeletedAt)
	return err
}

const getTagByID = `-- name: GetTagByID :one
SELECT id, name, created_at, updated_at, deleted_at
FROM tags
WHERE id = ?1 AND deleted_at = 0
LIMIT 1
`

func (q *Queries) GetTagByID(ctx context.Context, id int64) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByID, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTagByName = `-- name: GetTagByName :one
SELECT id, name, created_at, updated_at, deleted_at
FROM tags
WHERE name = ?1 AND deleted_at = 0
LIMIT 1
`

func (q *Queries) GetTagByName(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByName, name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAllTags = `-- name: ListAllTags :many
SELECT id, name, created_at, updated_at, deleted_at
FROM tags
ORDER BY name
`

func (q *Queries) ListAllTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listAllTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :exec
UPDATE tags
set name = ?2, updated_at = ?3
WHERE id = ?1 AND deleted_at = 0
`

type UpdateTagParams struct {
	ID        int64
	Name      string
	UpdatedAt int64
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.ExecContext(ctx, updateTag, arg.ID, arg.Name, arg.UpdatedAt)
	return err
}
